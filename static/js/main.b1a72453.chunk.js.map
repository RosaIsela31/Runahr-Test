{"version":3,"sources":["components/BreakingBad.js","components/BreakingBadComponent.js","App.js","serviceWorker.js","index.js"],"names":["BreakingBad","Component","BreakingBadComponent","props","state","characters","fetch","then","response","json","charactersJson","setState","name","this","cardInformation","map","nickname","status","img","console","log","App","basename","window","location","pathname","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wSAaeA,E,iLART,OACI,yC,GAJgBC,aC0CXC,E,YAxCb,WAAYC,GAAO,IAAD,8BACd,+CAEKC,MAAQ,CACXC,WAAY,IAJA,E,iFAQE,IAAD,OACfC,MAAM,6CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAc,OAAI,EAAKC,SAAS,CAAEN,WAAYK,S,+BAKxD,IAAME,EAAOC,KAAKT,MAAMC,WAAW,GAG7BS,GAFYD,KAAKT,MAAMC,WAAWU,KAAI,SAAAV,GAAU,gBAAOA,EAAWO,KAAlB,cAA4BP,EAAWW,aAErEH,KAAKT,MAAMC,WAAWU,KAAI,SAAAV,GAAU,gCAElDA,EAAWO,KAFuC,gCAG9CP,EAAWW,SAHmC,8BAIhDX,EAAWY,OAJqC,2BAKnDZ,EAAWa,IALwC,kBAY5D,OAJAC,QAAQC,IAAIR,GAEZO,QAAQC,IAAIN,GAGR,6BACE,kBAAC,EAAD,CAAaF,KAAME,S,GAlCIb,aCgBpBoB,G,uLAVT,OACI,kBAAC,IAAD,CAAQC,SAAUC,OAAOC,SAASC,UAAY,IAC1C,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW1B,U,GALjCD,cCKE4B,QACW,cAA7BN,OAAOC,SAASM,UAEe,UAA7BP,OAAOC,SAASM,UAEhBP,OAAOC,SAASM,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,kB","file":"static/js/main.b1a72453.chunk.js","sourcesContent":["import React,{ Component } from \"react\";\n\nclass BreakingBad extends Component{\n\n  render(){\n      return(\n          <div>\n              Holi\n          </div>\n      )\n  }\n}\n\nexport default BreakingBad;\n","import React,{ Component } from \"react\";\nimport BreakingBad from './BreakingBad';\n\nclass BreakingBadComponent extends Component{\n  constructor(props){\n      super();\n\n      this.state = {\n        characters: []\n      }\n  }\n\n  componentDidMount(){\n      fetch('https://breakingbadapi.com/api/characters')\n          .then(response => response.json())\n          .then(charactersJson => this.setState({ characters: charactersJson }))\n  }\n\n  render(){\n    \n      const name = this.state.characters[0]\n      const fullNames = this.state.characters.map(characters => `${characters.name} + ${characters.nickname}`);\n\n      const cardInformation = this.state.characters.map(characters => \n        `\n        name: ${characters.name} \n        nickname: ${characters.nickname} \n        status: ${characters.status} \n        img: ${characters.img}\n        `);\n     \n      console.log(name);\n      // console.log(fullNames);\n      console.log(cardInformation);\n      \n      return(\n          <div>\n            <BreakingBad name={cardInformation} />\n          </div>\n      )\n      \n  }\n}\n\nexport default BreakingBadComponent;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\nimport BreakingBadComponent from './components/BreakingBadComponent'\n\nimport './App.css';\n\nclass App extends Component {\n  render(){\n      return (\n          <Router basename={window.location.pathname || ''}>\n              <Switch>\n                  <Route exact path='/' component={BreakingBadComponent}/>\n              </Switch>\n          </Router> \n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}